{"name":"Vault Java Driver","tagline":"Zero-dependency Java client for HashiCorp's Vault","body":"Vault Java Driver\r\n=================\r\nA zero-dependency Java client for the [Vault](https://www.vaultproject.io/) secrets management solution from\r\nHashiCorp.\r\n\r\nThis driver strives to implement Vault's full HTTP API, along with supporting functionality such as automatic\r\nretry handling.  It does so without relying on any other external libraries beyond the Java standard library,\r\nand is compatible with Java environments as far back as Java 6.  So it will play nice with all of your projects,\r\ngreenfield and legacy alike, without causing conflicts with any other dependency.\r\n\r\nInstalling the Driver\r\n---------------------\r\nThe driver is available from Maven Central, for all modern Java build systems.\r\n\r\nGradle:\r\n```\r\ndependencies {\r\n    compile('com.bettercloud:vault-java-driver:0.3.0')\r\n}\r\n```\r\n\r\nMaven:\r\n```\r\n<dependency>\r\n    <groupId>com.bettercloud</groupId>\r\n    <artifactId>vault-java-driver</artifactId>\r\n    <version>0.3.0</version>\r\n</dependency>\r\n```\r\n\r\nInitializing a Driver Instance\r\n------------------------------\r\nThe `com.bettercloud.vault.VaultConfig` class is used to initialize a driver instance with desired settings.\r\nIn the most basic use cases, where you are only supplying a Vault server address and perhaps a root token, there\r\nare convenience constructor methods available:\r\n```\r\nfinal VaultConfig config = new VaultConfig(\"http://127.0.0.1:8200\", \"3c9fd6be-7bc2-9d1f-6fb3-cd746c0fc4e8\");\r\n\r\n// You may choose not to provide a root token initially, if you plan to use\r\n// the Vault driver to retrieve one programmatically from an auth backend.\r\nfinal VaultConfig config = new VaultConfig(\"http://127.0.0.1:8200\");\r\n```\r\n\r\nTo explicitly set additional config parameters (*), you can use a builder pattern style to construct the `VaultConfig`\r\ninstance.  Either way, the initialization process will try to populate any unset values by looking to\r\nenvironment variables.\r\n\r\n```\r\nfinal VaultConfig config =\r\n    new VaultConfig().\r\n        .address(\"http://127.0.0.1:8200\")               // Defaults to \"VAULT_ADDR\" environment variable\r\n        .token(\"3c9fd6be-7bc2-9d1f-6fb3-cd746c0fc4e8\")  // Defaults to \"VAULT_TOKEN\" environment variable\r\n        .openTimeout(5)                                 // Defaults to \"VAULT_OPEN_TIMEOUT\" environment variable\r\n        .readTimeout(30)                                // Defaults to \"VAULT_READ_TIMEOUT\" environment variable\r\n        .sslPemFile(\"/path/on/disk.pem\")                // Defaults to \"VAULT_SSL_CERT\" environment variable\r\n                                                        //    See also: \"sslPemUTF8()\" and \"sslPemResource()\"\r\n        .sslVerify(false)                               // Defaults to \"VAULT_SSL_VERIFY\" environment variable\r\n        .build();\r\n```\r\n\r\n> NOTES ON SSL CONFIG\r\n>\r\n> If your Vault server uses a SSL certificate, there are three different options for supplying that certificate to the\r\n> Vault driver:\r\n>\r\n> `sslPemFile(path)` - Supply the path to an X.509 certificate in unencrypted PEM format, using UTF-8 encoding.\r\n>\r\n> `sslPemResource(path)` - Same as above, but the path references a classpath resource rather than a filesystem path (e.g. if\r\n>                        you've bundled the PEM file into your applications's JAR, WAR, or EAR file).\r\n>\r\n> `sslPemUTF8(contents)` - The string contents extracted from the PEM file.  For Java to parse the certificate properly,\r\n>                        there must be a line-break in between the certificate header and body (see the `VaultConfig`\r\n>                        Javadocs for more detail).\r\n>\r\n> If none of these three methods are called, then `VaultConfig` will by default check for a `VAULT_SSL_CERT` environment\r\n> variable, and if that's set then it will be treated as a filesystem path.\r\n>\r\n> To disable SSL certificate verification altogether, set `sslVerify(false)`.  YOU SHOULD NOT DO THIS IS A REAL\r\n> PRODUCTION SETTING!  However, it can be useful in a development or testing server context.\r\n\r\nOnce you have initialized a `VaultConfig` object, you can use it to construct an instance of the `Vault` primary\r\ndriver class:\r\n\r\n```\r\nfinal Vault vault = new Vault(config);\r\n```\r\n\r\nUsing the Driver\r\n----------------\r\nLike the `VaultConfig` class, `Vault` too supports a builder pattern DSL style:\r\n\r\n```\r\nfinal Map<String, String> secrets = new HashMap<String, String>();\r\nsecrets.put(\"value\", \"world\");\r\nsecrets.put(\"other_value\", \"You can store multiple name/value pairs under a single key\");\r\n\r\n// Write operation\r\nfinal LogicalResponse writeResponse = vault.logical()\r\n                                        .write(\"secret/hello\", secrets);\r\n\r\n...\r\n\r\n// Read operation\r\nfinal String value = vault.logical()\r\n                       .read(\"secret/hello\")\r\n                       .getData().get(\"value\");\r\n```\r\n\r\n`Vault` has a number of methods for accessing the classes that implement the various endpoints of Vault's HTTP API:\r\n\r\n* `logical()`:  Contains core operations such as reading and writing secrets.\r\n* `auth()`:  Exposes methods for working with Vault's various auth backends (e.g. to programmatically retrieve a token\r\n  by authenticating with a username and password).\r\n\r\nThe driver DSL also allows you to specify retry logic, by chaining the `withRetries()` ahead of accessing the endpoint\r\nimplementation:\r\n\r\n```\r\n// Retry up to 5 times if failures occur, waiting 1000 milliseconds in between each retry attempt.\r\nfinal LogicalResponse response = vault.logical()\r\n                                   .withRetries(5, 1000)\r\n                                   .read(\"secret/hello\");\r\n```\r\n\r\nReference\r\n---------\r\nFull [Javadoc documentation](http://bettercloud.github.io/vault-java-driver/javadoc/).\r\n\r\nVersion History\r\n---------------\r\n* **0.5-RELEASE**: Adds support for supplying SSL certificates, and for toggling whether or not the Vault server's\r\n                   SSL certificate will be verified.  Also adds support for \"openTimeout\" and \"readTimeout\"\r\n                   settings.  Deprecates the \"timeout\", \"sslTimeout\", \"proxyAddress\", \"proxyPort\", \"proxyUsername\",\r\n                   and \"proxyPassword\" settings (the proxy settings may return in a future version, but it's too\r\n                   misleading to have methods exposed for settings that won't really be supported soon).\r\n* **0.3-RELEASE**: Initial public release.  Support for writing and reading secrets, authenticating with the \"AppID\"\r\n                   or \"Username & Password\" auth backends.  All over-the-wire methods support automatic retry logic.\r\n\r\nDevelopment\r\n-----------\r\nPull requests are welcomed for bugfixes or enhancements that do not alter the external facing class and method\r\nsignatures.  For any breaking changes that would alter the contract provided by this driver, please open up an issue\r\nto discuss it first.\r\n\r\nAll code changes should include unit test and/or integration test coverage as appropriate.  Unit tests are any that\r\ncan be run in isolation, with no external dependencies.  Integration tests are those which require a Vault server\r\ninstance (at least a Dev Server) up and running.\r\n\r\nUnit tests are located under the `src/test` directory, and can be run with the Grade `unitTest` task.\r\n\r\nIntegration tests are located under the `src/test-integration` directory, and can be run with the Gradle\r\n`integrationTest` task.  See the additional `README.md` file in this directory for more detailed information on the\r\nVault server setup steps required to run the integration test suite.\r\n\r\nLicense\r\n-------\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 BetterCloud\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\r\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\r\npersons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\r\nSoftware.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nOther Notes\r\n-----------\r\nThe Vault server system itself is a product of HashiCorp, a completely separate organization.\r\n\r\nThis client driver adapts JSON parsing code from Ralf Sternberg's excellent\r\n[minimal-json](https://github.com/ralfstx/minimal-json) library, likewise available under the MIT License.  Package\r\nnames have all been changed, to prevent any conflicts should you happen to be using a different version of that\r\nlibrary elsewhere in your project dependencies.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}